{"version":3,"sources":["serviceWorker.js","firebase/index.js","firebase/config.js","components/Message.js","components/ChatBox.js","components/AppChat.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","firebaseDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","styles","chip","margin","wrapper","display","flexWrap","Message","react_default","a","createElement","className","List_default","ListItem_default","disabled","Avatar_default","src","this","props","message","profile_image","style","marginBottom","user_name","Chip_default","text","React","Component","ChatBox","MuiThemeProvider_default","TextField_default","name","onChange","onTextChange","placeholder","rows","multiLine","RaisedButton_default","primary","label","onClick","onButtonClick","messagesRef","ref","AppChat","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","messages","map","m","i","Message_Message","key","ChatBox_ChatBox","e","target","setState","value","push","alert","_this2","on","snapshot","val","msgs","ReactDOM","render","components_AppChat","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3891a609.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import firebase from 'firebase';\nimport { firebaseConfig } from './config.js';\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\nexport const firebaseDb = firebaseApp.database();\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyB_OqxYVJu9we2myzOZbhjFbZvdwzW4YpA\",\n  authDomain: \"study-react-20fe1.firebaseapp.com\",\n  databaseURL: \"https://study-react-20fe1.firebaseio.com\",\n  projectId: \"study-react-20fe1\",\n  storageBucket: \"study-react-20fe1.appspot.com\",\n  messagingSenderId: \"850627636940\"\n};\n","import React from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Avatar from 'material-ui/Avatar';\nimport List from 'material-ui/List/List';\nimport ListItem from 'material-ui/List/ListItem';\nimport Chip from 'material-ui/Chip';\n\nconst styles = {\n  chip: {\n    margin: 4,\n  },\n  wrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n};\n\nconst style = {margintop: -5};\n\nexport default class Message extends React.Component {\n  render() {\n    return (\n      <div className=\"Message\">\n      <List>\n        <ListItem disabled=\"true\">\n          <Avatar className=\"\" src={this.props.message.profile_image} />\n          <span style={{marginBottom: -5}}>@{this.props.message.user_name}</span>\n          <div className=\"\">\n            <Chip style={styles.chip} >\n              {this.props.message.text}\n            </Chip>\n          </div>\n        </ListItem>\n      </List>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\nexport default class ChatBox extends React.Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className=\"ChatBox\">\n          <div className=\"\">\n            <TextField name='user_name' onChange={this.props.onTextChange} className=\"\"  placeholder=\"Name\" />\n<br />\n            <TextField name='profile_image' onChange={this.props.onTextChange} className=\"\" placeholder=\"Profile Image URL\" />\n          </div>\n          <TextField rows=\"4\" multiLine=\"true\" name='text' className=\"\" onChange={this.props.onTextChange} />\n          <RaisedButton primary=\"true\" label=\"Send\" className=\"\" onClick={this.props.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './../css/App.css';\nimport { firebaseDb } from './../firebase/index.js'\nimport Message from './Message.js'\nimport ChatBox from './ChatBox.js'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nconst messagesRef = firebaseDb.ref('messages')\n\nclass AppChat extends Component {\n  constructor(props) {\n    super(props);\n    this.onTextChange = this.onTextChange.bind(this)\n    this.onButtonClick = this.onButtonClick.bind(this)\n    this.state = {\n      text : \"\",\n      user_name: \"\",\n      profile_image: \"\",\n      messages : []\n    }\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <h2>Chat</h2>\n          </div>\n          <div className=\"MessageList\">\n            {this.state.messages.map((m, i) => {\n              return <Message key={i} message={m} />\n            })}\n          </div>\n          <ChatBox onTextChange={this.onTextChange} onButtonClick={this.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n\n  onTextChange(e) {\n    if(e.target.name == 'user_name') {\n      this.setState({\n        \"user_name\": e.target.value,\n      });\n    } else if (e.target.name == 'profile_image') {\n      this.setState({\n        \"profile_image\": e.target.value,\n      });\n    } else if (e.target.name == 'text') {\n      this.setState({\n        \"text\": e.target.value,\n      });\n    }\n  }\n\n  onButtonClick() {\n    if(this.state.user_name == \"\") {\n      alert('user_name empty')\n      return\n    } else if(this.state.text == \"\") {\n      alert('text empty')\n      return\n    }\n    messagesRef.push({\n      \"user_name\" : this.state.user_name,\n      \"profile_image\" : this.state.profile_image,\n      \"text\" : this.state.text,\n    })\n  }\n\n  componentWillMount() {\n    messagesRef.on('child_added', (snapshot) => {\n      const m = snapshot.val()\n      let msgs = this.state.messages\n\n      msgs.push({\n        'text' : m.text,\n        'user_name' : m.user_name,\n        'profile_image' : m.profile_image,\n      })\n\n      this.setState({\n        messages : msgs\n      });\n    })\n  }\n\n}\n\nexport default AppChat;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// \n// ReactDOM.render(<App />, document.getElementById('root'));\n\n/// If you want your app to work offline and load faster, you can change\n/// unregister() to register() below. Note this comes with some pitfalls.\n/// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\n// import registerServiceWorker from './registerServiceWorker';\nimport * as serviceWorker from './serviceWorker';\n// import * as serviceWorker from './serviceWorker';\nimport AppChat from './components/AppChat';\nimport injectTapEventPlugin from 'react-tap-event-plugin';\n\nReactDOM.render(<AppChat />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}